c                                                                     c
c*********************************************************************c
c                                                                     c
      subroutine capecalc3d(prs,tmk,qvp,ght,ter,prsf,cape,cin,
     &   bmin3, 
     &   miy,mjx,mkzh,i3dflag)
c
c   If i3dflag=1, this routine calculates CAPE and CIN (in m**2/s**2,
c   or J/kg) for every grid point in the entire 3D domain (treating
c   each grid point as a parcel).  If i3dflag=0, then it
c   calculates CAPE and CIN only for the parcel with max theta-e in
c   the column, (i.e. something akin to Colman's MCAPE).  By "parcel",
c   we mean a 500-m deep parcel, with actual temperature and moisture
c   averaged over that depth.
c
c   20130118 - skip 3d calculations for parcels above 400mb.
c
c   In the case of i3dflag=0,
c   CAPE and CIN are 2D fields that are placed in the k=mkzh slabs of
c   the cape and cin arrays.  Also, if i3dflag=0, LCL and LFC heights
c   are put in the k=mkzh-1 and k=mkzh-2 slabs of the cin array.
c
c   If i3dflag=2,
c   Read a file that contains the parcel origin levels (kpar) for each
c   horizontal grid point.
c
c   If i3dflag=3, for bmin_max
c   Caculate bmin3 as if it was i3dflag=1, but then return in 2D array as if
c   i3dflag = 0.  The 2D array is not bmin, per se, but bmin_max, the maximum
c   bmin in each column. 
c   bmin_max is returned in bmin, 
c   kbmin_max is returned in kbmin, and zbmin_max is returned in zbmin.
c
c
      implicit none
! When declaring variables, declaring intent is optional. But it helps prevent bugs.
! intent(in) means the variable can enter, but can't be changed.
! intent(out) means the variable is set inside the procedure and sent 
!             back to the main program with any initial values ignored.
! intent(inout) is the default. It means the variable comes in with
!               a value and leaves with a value.
      real, intent(in) :: prs, tmk, qvp, ght, ter, prsf
      real, intent(out) :: cape, cin, bmin3
      integer, intent(in) :: miy, mjx, mkzh, i3dflag

      real, bmin_max, zpar_orig, bmin, zbmin, bmax, tv_bmin, tlc, 
     &   zpar_orig_bmin_max, zbmin_max, tv_bmin_max, tlc_bmin_max
      dimension prs(miy,mjx,mkzh),tmk(miy,mjx,mkzh),qvp(miy,mjx,mkzh),
     &   ght(miy,mjx,mkzh),ter(miy,mjx),cape(miy,mjx,mkzh),
     &   cin(miy,mjx,mkzh),prsf(miy,mjx,mkzh),
     &   zpar_orig(miy,mjx),bmin(miy,mjx),zbmin(miy,mjx),
     &   bmin3(miy,mjx,mkzh),bmin_max(miy,mjx),
     &   tv_bmin(miy,mjx),tlc(miy,mjx),bmax(miy,mjx),
     &   zpar_orig_bmin_max(miy,mjx), zbmin_max(miy,mjx), 
     &   tv_bmin_max(miy,mjx), tlc_bmin_max(miy,mjx)
      real, theta(miy,mjx,mkzh)
      real, t_tlift(mkzh),p_tlift(mkzh),q_tlift(mkzh)
      integer kbmin(miy,mjx),kpar_orig(miy,mjx), idebug, jdebug, ilfc
      integer kbmin_max(miy,mjx), kpar_orig_bmin_max(miy,mjx)
      integer i,j,k,kpar1,kpar2,klev,kpar,kk,first_klev_abv_3000m
      integer ilcl, klcl, kmax, kel, klfc
      real ethmax, q, t, p, e, tlcl, eth, davg, pavg, virtual
      real p1, p2, totthe, totqvp, totprs, pup, pdn, th, pp1, pp2
      real deltap, qvppari, tmkpari, prspari, ghtpari, gammam, cpm
      real ethpari, zlcl, qvplift, tmklift, tvenv, tvlift
      real ghtlift, facden, fac1, fac2, tmkenv, qvpenv, tonpsadiabat
      real eslift, benamin, dz, tl, tm, dummy
c
      real buoy(150),zrel(150),benaccum(150)
c
      include 'comconst'

c
      jdebug = 500
      idebug = 350
      first_klev_abv_3000m = -1 
 
c     had to add this because that's what happens in the original pvocalc routine.
c     it converts tmk to theta with thecalc.f and converts back with a different formula .
      call thecalc(prs,tmk,qvp,theta,miy,mjx,mkzh)

      do j=1,mjx-1 ! why -1? Because sometimes prs(miy,j,:) is zero
      do i=1,miy-1 ! why -1? ahijevych 2013 Jan 22 
         !cape(i,j,1)=0. ! don't see the point of this if you only initialize level 1
         !cin(i,j,1)=0.
         ! maximum bmin when lifted parcel has some cape (>100 J/kg)
         ! initialize to a really negative number
         ! only valid when i3dflag=1 (bmin3 is calculated). 
         bmin_max(i,j)=-99.  ! initialize with low value
         zpar_orig(i,j) = -99.
         bmin(i,j) = -99.
         zbmin(i,j) = -99.
         tv_bmin(i,j) = -99.
         tlc(i,j) = -99.
         bmax(i,j) = -99.
         zpar_orig_bmin_max(i,j) = -99.
         zbmin_max(i,j) = -99.
         tv_bmin_max(i,j) = -99.
         tlc_bmin_max(i,j) = -99.
         kbmin(i,j) = -99
         kpar_orig(i,j) = -99
         kbmin_max(i,j) = -99
         kpar_orig_bmin_max(i,j) = -99
c

      do k=mkzh,1,-1
c converted from temperature to theta with thecalc routine above and back to temperature with
c this formula. This follows the old pvocalc routine exactly. - Ahijevych
            t_tlift(k)=theta(i,j,k)*(prs(i,j,k)/1000.)**(287./1004.)
            q_tlift(k)=qvp(i,j,k)
            p_tlift(k)=prs(i,j,k)
            if ((ght(i,j,k)-ter(i,j)).gt.3000 .and.
     &         first_klev_abv_3000m.eq.-1) then
               first_klev_abv_3000m = k
            endif
            bmin3(i,j,k)=-99.
      enddo



      if (i3dflag.eq.1.or.i3dflag.eq.3) then
c        kpar1 used to be 2
         kpar1=first_klev_abv_3000m
         kpar2=mkzh
      else if (i3dflag.eq.2) then
c        read kpar1 from file
c        set kpar2=kpar1
      else
c
c      Find parcel with max theta-e in lowest 3 km AGL.
c
         ethmax=-1.
         do k=mkzh,1,-1
            if (ght(i,j,k)-ter(i,j).lt.3000.) then
               q=max(qvp(i,j,k),1.e-15)
               t=tmk(i,j,k)
               p=prs(i,j,k)
               e=q*p/(eps+q)
               tlcl=tlclc1/(log(t**tlclc2/e)-tlclc3)+tlclc4
               eth=t*(1000./p)**(gamma*(1.+gammamd*q))*
     &            exp((thtecon1/tlcl-thtecon2)*q*(1.+thtecon3*q))
               if ((i.eq.idebug).and.(j.eq.jdebug)) 
     &           write(iup,'(A,I4,A,I4,A,I3,A,F9.4,
     &           F9.4,F9.6,A,F9.3,A,
     &           F9.3,A,F9.4)')
     &           '(',i,',',j,',',k,')  eth,t,q=',eth,
     &           t, q, '  z=', ght(i,j,k), ' zagl=', 
     &           ght(i,j,k)-ter(i,j),' p=', p
               if (eth.gt.ethmax) then
                  klev=k
                  ethmax=eth
                  tlc(i,j)=tlcl
               endif
            endif
         enddo
         kpar1=klev
         kpar2=klev
      endif
      do kpar=kpar1,kpar2
         kpar_orig(i,j)=kpar
         zpar_orig(i,j)=ght(i,j,kpar)!-ter(i,j)
c
c      Establish average properties of that parcel
c         (over depth of approximately davg meters)
c
c      The RIP User's Guide says nothing about averaging, so consider using 0.
c         davg=.1
         davg=500.
c        On Jan 27 2013 Ahijevych
c        replaced kpar1 with kpar for pavg, p2, and tmkpari
c        Why should you use static kpar1? You should recalculate
c        these variables with each new parcel origin (kpar). 
         pavg=davg*prs(i,j,kpar)*grav/
     &      (rgas*virtual(tmk(i,j,kpar),qvp(i,j,kpar)))
         p2=min(prs(i,j,kpar)+.5*pavg,prsf(i,j,mkzh))
         p1=p2-pavg
         totthe=0.
         totqvp=0.
         totprs=0.
         do k=mkzh,2,-1
            if (prsf(i,j,k).le.p1) goto 35
            if (prsf(i,j,k-1).ge.p2) goto 34
            p=prs(i,j,k)
            pup=prsf(i,j,k)
            pdn=prsf(i,j,k-1)
            q=max(qvp(i,j,k),1.e-15)
            th=tmk(i,j,k)*(1000./p)**(gamma*(1.+gammamd*q))
            pp1=max(p1,pdn)
            pp2=min(p2,pup)
            if (pp2.gt.pp1) then
               deltap=pp2-pp1
               totqvp=totqvp+q*deltap
               totthe=totthe+th*deltap
               totprs=totprs+deltap
            endif
 34         continue
         enddo
 35      continue
         qvppari=totqvp/totprs
         tmkpari=(totthe/totprs)*(prs(i,j,kpar)/1000.)**
     &      (gamma*(1.+gammamd*qvp(i,j,kpar)))
c

      prspari=prs(i,j,kpar)
      ghtpari=ght(i,j,kpar)
      gammam=gamma*(1.+gammamd*qvppari)
      cpm=cp*(1.+cpmd*qvppari)
c
      e=max(1.e-20,qvppari*prspari/(eps+qvppari))
      tlcl=tlclc1/(log(tmkpari**tlclc2/e)-tlclc3)+tlclc4
      ethpari=tmkpari*(1000./prspari)**(gamma*(1.+gammamd*qvppari))*
     &   exp((thtecon1/tlcl-thtecon2)*qvppari*
     &   (1.+thtecon3*qvppari))
      zlcl=ghtpari+(tmkpari-tlcl)/(grav/cpm)
c
c   Calculate buoyancy and relative height of lifted parcel at
c   all levels, and store in bottom up arrays.  Add a level at the LCL,
c   and at all points where buoyancy is zero.
c
      kk=0 ! for arrays that go bottom to top
      ilcl=0
      ilfc=0          ! LFC flag
      bmax(i,j)=-100. ! must initialize with low value
      if (ghtpari.ge.zlcl) then
c
c      initial parcel already saturated or supersaturated.
c
         ilcl=2
         klcl=1
      endif
      do k=kpar,1,-1
 33      kk=kk+1                ! for arrays that go bottom to top
         if (ght(i,j,k).lt.zlcl) then ! model level is below LCL
            qvplift=qvppari
            tmklift=tmkpari-grav/cpm*(ght(i,j,k)-ghtpari)
            tvenv=virtual(tmk(i,j,k),qvp(i,j,k))
            tvlift=virtual(tmklift,qvplift)
            ghtlift=ght(i,j,k)
         elseif (ght(i,j,k).ge.zlcl.and.ilcl.eq.0) then
c
c         This model level and previous model level straddle the LCL,
c         so first create a new level in the bottom-up array, at the LCL.
c
            tmklift=tlcl
            qvplift=qvppari
            facden=ght(i,j,k)-ght(i,j,k+1)
            fac1=(zlcl-ght(i,j,k+1))/facden
            fac2=(ght(i,j,k)-zlcl)/facden
            tmkenv=tmk(i,j,k+1)*fac2+tmk(i,j,k)*fac1
            qvpenv=qvp(i,j,k+1)*fac2+qvp(i,j,k)*fac1
            tvenv=virtual(tmkenv,qvpenv)
            tvlift=virtual(tmklift,qvplift)
            ghtlift=zlcl
            ilcl=1
         else
            tmklift=tonpsadiabat(ethpari,prs(i,j,k))
            eslift=ezero*exp(eslcon1*(tmklift-celkel)/
     &         (tmklift-eslcon2))
            qvplift=eps*eslift/(prs(i,j,k)-eslift)
            tvenv=virtual(tmk(i,j,k),qvp(i,j,k))
            tvlift=virtual(tmklift,qvplift)
            ghtlift=ght(i,j,k)
         endif
         buoy(kk)=grav*(tvlift-tvenv)/tvenv  ! buoyancy
         zrel(kk)=ghtlift-ghtpari
         if ((i.eq.idebug).and.(j.eq.jdebug)) THEN
            write(iup,'(A,I4,A,I4,A,I3,A,F9.4,
     &      A,F9.4,A,F8.4,A,F11.6,A,I2,A,F12.7,A,I1)')
     &      '(',i,',',j,',',k,') p=', prs(i,j,k), 
     &      ' tvlift-tvenv =',tvlift,'-',tvenv,' =',tvlift-tvenv,
     &      ' kk=', kk, ' buoy(kk)=', buoy(kk), ' ilfc=', ilfc 
         endif 
         if (tvlift-tvenv.lt.bmin(i,j) .and. ilfc.eq.0) then
c  See if the current parcel temperature deficit is less than bmin.
c   ilfc must be zero, and the height AGL must also be below 7km in order to
c   assign a new value to bmin. In the daytime with a moist surface, 
c   the parcel is buoyant all the way to the equilibrium level.  
c  We don't want bmin values above 7km AGL. In these cases, ilfc is ill-defined.
c   Technically the LFC would be at the parcel origin.  But because
c   the buoyancy never passes from negative to positive territory, ilfc  
c   never changes from zero to 1.           
            bmin(i,j)=tvlift-tvenv
            zbmin(i,j)=ght(i,j,k)-ter(i,j)
            tv_bmin(i,j)=tvlift
            kbmin(i,j)=k
         endif
         if (tvlift-tvenv.gt.bmax(i,j)) bmax(i,j)=tvlift-tvenv
         if (kk.gt.1) then
         if (buoy(kk)*buoy(kk-1).lt.0.0) then
c
c         Parcel ascent curve crosses sounding curve, so create a new level
c         in the bottom-up array at the crossing.
c
            if (buoy(kk) .gt. 0) ilfc=1 ! make sure we are crossing from neg to pos buoyancy for LFC
            kk=kk+1
            buoy(kk)=buoy(kk-1)
            zrel(kk)=zrel(kk-1)
            buoy(kk-1)=0.
            zrel(kk-1)=zrel(kk-2)+
     &         buoy(kk-2)/(buoy(kk-2)-buoy(kk))*(zrel(kk)-zrel(kk-2))
         endif
         endif
         if (ilcl.eq.1) then
            klcl=kk
            ilcl=2
            goto 33
         endif
      enddo
      kmax=kk
      if (kmax.gt.150) then
         write(iup,*)'in capecalc3d: kmax got too big. kmax=',kmax
         stop
      endif
c
c   If no LCL was found, set klcl to kmax.  It is probably not really
c   at kmax, but this will make the rest of the routine behave
c   properly.
c
      if (ilcl.eq.0) klcl=kmax
c
c   Get the accumulated buoyant energy from the parcel's starting
c   point, at all levels up to the top level.
c
      benaccum(1)=0.0
      benamin=9e9
      do k=2,kmax
         dz=zrel(k)-zrel(k-1)
         benaccum(k)=benaccum(k-1)+.5*dz*(buoy(k-1)+buoy(k))
         if (benaccum(k).lt.benamin) then
            benamin=benaccum(k)
         endif
      enddo
c
c     Determine equilibrium level (EL), which we define as the highest
c     level of non-negative buoyancy above the LCL. Note, this may be
c     the top level if the parcel is still buoyant there.
c     
      do k=kmax,klcl,-1
         if (buoy(k).ge.0.) then
            kel=k   ! k of equilibrium level
            goto 50
         endif
      enddo
c
c   If we got through that loop, then there is no non-negative
c   buoyancy above the LCL in the sounding.  In these situations,
c   both CAPE and CIN will be set to -0.1 J/kg.  Also, where CAPE is
c   non-zero, CAPE and CIN will be set to a minimum of +0.1 J/kg, so
c   that the zero contour in either the CIN or CAPE fields will
c   circumscribe regions of non-zero CAPE.
c
      cape(i,j,kpar)=-0.1
      cin(i,j,kpar)=-0.1
      klfc=kmax
c
      goto 102
c
 50   continue
c
c   If there is an equilibrium level, then CAPE is positive.  We'll
c   define the level of free convection (LFC) as the point below the
c   EL, but at or above the LCL, where accumulated buoyant energy is a
c   minimum.  The net positive area (accumulated buoyant energy) from
c   the LFC up to the EL will be defined as the CAPE, and the net
c   negative area (negative of accumulated buoyant energy) from the
c   parcel starting point to the LFC will be defined as the convective
c   inhibition (CIN).
c
c   First get the LFC according to the above definition.
c
      benamin=9e9
      klfc=kmax
      do k=klcl,kel
         if (benaccum(k).lt.benamin) then
            benamin=benaccum(k)
            klfc=k
         endif
      enddo
c
c   Now we can assign values to cape and cin
c
      cape(i,j,kpar)=max(benaccum(kel)-benamin,0.1)
      cin(i,j,kpar)=max(-benamin,0.1)
c
c   CIN is uninteresting when CAPE is small (< 100 J/kg), so set
c   CIN to -.1 in that case.
c
      if ( cape(i,j,kpar) .lt. 100. ) cin(i,j,kpar) = -0.1
 102  continue
c
      call tlift(t_tlift,0.,zpar_orig(i,j),p_tlift,q_tlift,0.,tl,tm,
     & i,j,kpar_orig(i,j),mkzh, dummy)
      bmin(i,j) = tl
      bmax(i,j) = tm
      bmin3(i,j,kpar)=bmin(i,j)
      ! if there is some cape and this is the max value of bmin seen
      ! in the column so far then assign bmin to bmin_max.
      if (
c  Uncomment to require bmin_max parcels to have some CAPE.
c     &   cape(i,j,kpar) .gt. 100 .and. 
     &   bmin_max(i,j) .lt. bmin(i,j)) then

         bmin_max(i,j) = bmin(i,j)
         kbmin_max(i,j) = kbmin(i,j)
         zbmin_max(i,j) = zbmin(i,j)
         tlc_bmin_max(i,j) = tlc(i,j)
         tv_bmin_max(i,j) = tv_bmin(i,j)
         zpar_orig_bmin_max(i,j) = ght(i,j,kpar)-ter(i,j)
         kpar_orig_bmin_max(i,j) = kpar
      endif
c
      enddo ! kpar (vertical loop)

      if (i3dflag.eq.0) then
         cape(i,j,mkzh)=cape(i,j,kpar1)
         cin(i,j,mkzh)=cin(i,j,kpar1)! kpar increments in the do loop.
                                    ! i.e. kpar=kpar1,kpar2  Confusing to be kpar1.
                                    ! But in 2D case this doesn't matter, but it is
                                    ! confusing and sometimes wrong to use kpar1 
                                    ! instead of kpar
         cin(i,j,mkzh-1)=zrel(klcl)+ghtpari-ter(i,j)   ! meters AGL
         cin(i,j,mkzh-2)=zrel(klfc)+ghtpari-ter(i,j)   ! meters AGL
         cin(i,j,mkzh-3)=kbmin(i,j) ! model level of min buoyancy
         cin(i,j,mkzh-4)=bmin(i,j)  ! min buoyancy
         cin(i,j,mkzh-5)=zbmin(i,j) ! height of min buoyancy (meters AGL)
         cin(i,j,mkzh-6)=tlc(i,j)   ! LCL temperature
         cin(i,j,mkzh-7)=tv_bmin(i,j) ! virtual temperature of lifted parcel
         cin(i,j,mkzh-8)=zpar_orig(i,j)-ter(i,j)
         cin(i,j,mkzh-9)=kpar_orig(i,j)
         cin(i,j,mkzh-10)=bmax(i,j)
      endif
      if (i3dflag.eq.3) then 
         cin(i,j,mkzh-3)=kbmin_max(i,j)
         cin(i,j,mkzh-4)=bmin_max(i,j)
         cin(i,j,mkzh-5)=zbmin_max(i,j)
         cin(i,j,mkzh-6)=tlc_bmin_max(i,j)   ! LCL temperature
         cin(i,j,mkzh-7)=tv_bmin_max(i,j) ! virtual temperature of lifted parcel
         cin(i,j,mkzh-8)=zpar_orig_bmin_max(i,j)-ter(i,j)
         cin(i,j,mkzh-9)=kpar_orig_bmin_max(i,j)
      endif
c
      enddo
      enddo


      ! Write some fort files to pvocalc can use them
      ! They contain unformatted data and are called fort.16 and fort.17.

      if (i3dflag.eq.3) then
        ! If i3dflag=3 bmin_max is returned in bmin, kbmin_max is returned
        ! in kbmin, and zbmin_max is returned in zbmin
        ! Output some debugging info about bmin_max.
        open(unit=25,file='bmin_max.debug',form='formatted',
     &    access='sequential', status='unknown')
        write(25,'(2I5,I4)') miy,mjx,mkzh
        do i=1,miy-1
          do j=1,mjx-1 ! minus 1 because that is what the loop above does
            if(bmin_max(i,j).ne.-99.)
     &        write(25,'(2I5,F10.2,I14,2F10.2)')
     &        i,j, cape(i,j,kpar_orig_bmin_max(i,j)),
     &        kpar_orig_bmin_max(i,j), bmin_max(i,j), 
     &        zpar_orig_bmin_max(i,j)
          enddo
        enddo
        close(25)

        write(16)kbmin_max
        write(16)bmin_max
        write(16)zbmin_max
        write(16)tlc_bmin_max
        write(16)tv_bmin_max
        write(17)zpar_orig_bmin_max
        write(17)kpar_orig_bmin_max
      else
        ! Otherwise, i3dflag.ne.3 so write regular kbmin, bmin, zbmin, etc.
        write(16)kbmin
        write(16)bmin
        write(16)zbmin
        write(16)tlc
        write(16)tv_bmin
        write(17)zpar_orig
        write(17)kpar_orig
      endif
  
      write(17)ter
      close(16)
      close(17)

      return
      end
